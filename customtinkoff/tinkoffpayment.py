import typing as t

from customtinkoff import MODULE_NAME, logger
from customtinkoff.payment import Payment
from customtinkoff.tinkoffkassa import TinkoffKassa


class TinkoffPayment(Payment):

    def __init__(self, elid: str, cookies: str = "", http_host: str = "",
                 request_method: str = "", https: str = "") -> None:
        super().__init__(elid, cookies, http_host, request_method, https)

        self.int_amount = self.payment_params.get("paymethodamount")\
                              .replace(".", "")
        self.order_id = "billmgr#{0}#{1}".format(
            self.elid, self.payment_params.get("randomnumber"))
        self.success_page + "&elid=" + self.elid + "&module=" + MODULE_NAME
        self.fail_page + "&elid=" + self.elid+"&module=" + MODULE_NAME

        self.kassa: TinkoffKassa = TinkoffKassa(
            terminalkey=self.paymethod_params.get("terminalkey"),
            terminalpsw=self.paymethod_params.get("terminalpsw")
        )

    def make(self) -> str:
        """
        Метод инициализирует платёж и устанавливает статус платежа.\n
        Возвращает URL для дальнейшего перехода в Тинькофф Кассу.
        """

        logger.info("run TinkoffPayment.make")

        response: t.Dict[str, t.Union[str, int]] = self.kassa.init_payment(
            amount=self.int_amount,
            order_id=self.order_id,
            success_url=self.success_page,
            fail_url=self.fail_page
        )
        response_info: str = "{0} {1}".format(response.get("Message"),
                                              response.get("Details")).strip()

        if not response.get("Success"):
            self.set_canceled(payment_id=self.elid,
                              info=response_info,
                              externalid=response.get("PaymentId"))
            raise Exception("Ошибка инициализации платежа. " + response_info)

        self.set_in_pay(payment_id=self.elid,
                        info=response_info,
                        externalid=response.get("PaymentId"))

        payment_url: str = response.get("PaymentURL")
        return payment_url

    # ex Process()
    def get_redirect_request(self, url: str) -> str:
        """
        Метод возвращает полный HTTP запрос с переадресацией в Тинькофф кассу.
        """

        # необходимые данные достаем из self.payment_params, self.paymethod_params, self.user_params
        # здесь для примера выводим параметры метода оплаты (self.paymethod_params)
        # и платежа (self.payment_params) в лог
        logger.info(f"paymethod_params = {self.paymethod_params}")
        logger.info(f"payment_params = {self.payment_params}")
        # Вывод:
        # ... paymethod_params = {'id': '2', 'orderpriority': '2', 'name': None, 'active': 'on', 'minamount': '1.00', 'maxamount': None, 'autoclearperiod': None, 'currency': '126', 'profiletype': '1,2,3', 'commissionamount': '0.00', 'commissionpercent': '0', 'module': 'pmtestpayment', 'doctmpl': None, 'recurring': 'off', 'numtmpl_payment': None, 'nextnum_payment': None, 'payimage': None, 'payimagenewface': None, 'allowrefund': 'off', 'language': None, 'payment_description': None, 'note': None, 'description': None, 'receipt_profiletype': None, 'description_markdown': None, 'successpage': None, 'failpage': None, 'pendingpage': None, 'successpage_recurring': None, 'failpage_recurring': None, 'pendingpage_recurring': None, 'successpage_subscription': None, 'failpage_subscription': None, 'pendingpage_subscription': None, 'verified': 'off', 'name_ru': 'перв тест', 'description_ru': None, 'description_markdown_ru': None, 'terminalkey': 'lll', 'terminalpsw': 'ppp'}
        # ... payment_params = {'id': '2', 'subaccount': '1', 'paymethod': None, 'recipient': None, 'sender': None, 'subaccountamount': '1.00', 'status': '8', 'number': 'pfx/2', 'paymethodamount': '1.00', 'usedamount': '0.00', 'commissionamount': '0.00', 'expense_commission': None, 'paydate': None, 'createdate': '2024-04-30 15:28:52', 'taxrate': None, 'taxamount': None, 'currency': None, 'externalid': None, 'billorder': None, 'recurring': None, 'recurring_subscription': None, 'documentnumber': None, 'randomnumber': '15ajF8ZjxBn5', 'documentdate': None, 'description': 'Авансовый платеж #2', 'invoice': None, 'refund': 'off', 'restrictrefund': 'off', 'recurring_action_on_fail': None, 'recurring_action_on_success': None, 'autogenerated': 'off', 'chargecommission': 'on', 'paymethodcommissionamount': '0.00', 'remote_ip': '192.168.60.90', 'manager_url': 'https://192.168.40.66/billmgr', 'user_id': '1', 'useremail': '342848h8942h3@fhdgdfv89h3.ru', 'userrealname': '342848h8942h3@fhdgdfv89h3.ru', 'userphone': None, 'project': None, 'items': None, 'notaxamount': '1.00', 'no_vat': 'off'}

        # logger.info(f"request_body = {request_body}")

        # logger.info("kassa_response = " + str(kassa_response))


        # url для перенаправления c cgi
        # здесь, в тестовом примере сразу перенаправляем на страницу BILLmanager
        # должны перенаправлять на страницу платежной системы
        # redirect_url = self.pending_page


        # формируем html и отправляем в stdout
        # таким образом переходим на redirect_url
        # TODO: загрузить http из templates, заменить "{{ redirect_url }}" и записать в переменную
        return '<html>\n<head>\n<meta http-equiv="refresh" content="0; URL={0}">\n</head>\n<body></body>\n</html>'\
            .format(url)
